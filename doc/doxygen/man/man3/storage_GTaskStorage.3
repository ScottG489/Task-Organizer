.TH "storage::GTaskStorage" 3 "Wed Sep 28 2011" "Task-Organizer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
storage::GTaskStorage \- 
.PP
Interface for storing Tasks to Google Tasks'\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBstorage::Storage\fP'\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP"
.br
.ti -1c
.RI "def \fBadd\fP"
.br
.ti -1c
.RI "def \fBfind\fP"
.br
.ti -1c
.RI "def \fBget_all\fP"
.br
.ti -1c
.RI "def \fBupdate\fP"
.br
.ti -1c
.RI "def \fBdelete\fP"
.br
.ti -1c
.RI "def \fBsearch\fP"
.br
.RI "\fIReturn a Task list given a search Task'\&. \fP"
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "\fBFLAGS\fP = gflags\&.FLAGS"
.br
.in -1c
.SH "Detailed Description"
.PP 
Interface for storing Tasks to Google Tasks'\&. 

Public methods: add(task_item) find(key = None) \fBget_all()\fP update(task_item) delete(key) search(search_task)
.PP
Reads and writes Task from Google Tasks'\&. Task objects are transformed to and from Google's task dictionaries'\&. 
.PP
Definition at line 626 of file storage\&.py'\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "def storage::GTaskStorage::__init__ (self)"
.PP
Reimplemented from \fBstorage::Storage\fP'\&.
.PP
Definition at line 629 of file storage\&.py'\&.
.SH "Member Function Documentation"
.PP 
.SS "def storage::GTaskStorage::add (self, task_item)".PP
.nf
Add a Task to the GTask storage.


Args:
    task_item (Task): The Task object to be added to storage.

Returns:
    task_item.key (int): Newly added Task's key.

Raises:


The Task object is added to storage and given a key.

.fi
.PP
 
.PP
Reimplemented from \fBstorage::Storage\fP'\&.
.PP
Definition at line 648 of file storage\&.py'\&.
.SS "def storage::GTaskStorage::delete (self, key)".PP
.nf
Delete an existing Task in the GTask storage.

Args:
    key (int): The key for the desired Task object to delete.

Returns:
    key_match (int): Task's key that was deleted in storage.

Raises:


Using the given key, delete the matching Task. If none is found,
nothing is deleted and return None.

.fi
.PP
 
.PP
Reimplemented from \fBstorage::Storage\fP'\&.
.PP
Definition at line 793 of file storage\&.py'\&.
.SS "def storage::GTaskStorage::find (self, key = \fCNone\fP)".PP
.nf
Return a Task given it's key.

Args:
    key (int): The key for the desired Task object.

Returns:
    task_item (Task): Task with matching key.

Raises:


Using the given key, return the Task with the matching key. If none
is found return None.
.fi
.PP
 
.PP
Reimplemented from \fBstorage::Storage\fP'\&.
.PP
Definition at line 684 of file storage\&.py'\&.
.SS "def storage::GTaskStorage::get_all (self)".PP
.nf
Return a list of all Tasks..fi
.PP
 
.PP
Reimplemented from \fBstorage::Storage\fP'\&.
.PP
Definition at line 724 of file storage\&.py'\&.
.SS "def storage::GTaskStorage::search (self, search_task)"
.PP
Return a Task list given a search Task'\&. Args: search_task (Task): The Task to be used for searching'\&.
.PP
Returns: task_search_list (Task[]): List of Tasks matching search criteria'\&.
.PP
Raises:
.PP
Using the given search Task, iterate through the Task list and append matching Tasks to a Task list then return this list'\&. If none matches, return None'\&. 
.PP
Reimplemented from \fBstorage::Storage\fP'\&.
.PP
Definition at line 845 of file storage\&.py'\&.
.SS "def storage::GTaskStorage::update (self, task_item)".PP
.nf
Update an existing Task in the GTask storage.

Args:
    task_item (Task): The Task object to be updated.

Returns:
    key_match (int): Task's key that was updating in storage.

Raises:


Using the given Task's key, find the Task with a matching key and
replace it with the given Task. Then return the old Task. If none
is found, updating nothing and return None.

.fi
.PP
 
.PP
Reimplemented from \fBstorage::Storage\fP'\&.
.PP
Definition at line 746 of file storage\&.py'\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBstorage::GTaskStorage::FLAGS\fP = gflags\&.FLAGS\fC [static]\fP"
.PP
Definition at line 627 of file storage\&.py'\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Task-Organizer from the source code'\&.
