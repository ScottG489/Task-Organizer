.TH "controller::Controller" 3 "Sat Sep 24 2011" "Task-Organizer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
controller::Controller \- 
.PP
Interface to manipulate Tasks'\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP"
.br
.ti -1c
.RI "def \fBadd\fP"
.br
.ti -1c
.RI "def \fBfind\fP"
.br
.ti -1c
.RI "def \fBedit\fP"
.br
.ti -1c
.RI "def \fBdelete\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Interface to manipulate Tasks'\&. 

Args: storage_type (str): Type of storage in which to persist Tasks
.PP
Kwargs: task_dbname (str): Name of the sqlite database file'\&. task_filename (str): Name of the file when using file storage'\&. key_filename (str): Name of the key file when using file storage'\&.
.PP
Methods: add(task_item) find(task_item) edit(task_item) delete(task_item)
.PP
API for working with Task objects'\&. 
.PP
Definition at line 33 of file controller\&.py'\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "def controller::Controller::__init__ (self, storage_type, task_dbname = \fC'taskdb'\fP, task_filename = \fC'taskfile'\fP, key_filename = \fC'keyfile'\fP)"
.PP
Definition at line 34 of file controller\&.py'\&.
.SH "Member Function Documentation"
.PP 
.SS "def controller::Controller::add (self, task_item)".PP
.nf
Return a Task given an argument dictionary.

Args:
    task_item (Task): Task object to add to storage

Returns:
    task_item (Task): Newly added Task with key

The given task is added to storage.

.fi
.PP
 
.PP
Definition at line 46 of file controller\&.py'\&.
.SS "def controller::Controller::delete (self, task_item)".PP
.nf
Delete an existing Task.

Arguments:
    task_item (Task): Task to use to delete a Task in storage.

Returns:
    deleted_task (Task): Task that was in storage before being deleted.

Using the given Task's key, if a Task with a matching key is found in
storage, delete it.

.fi
.PP
 
.PP
Definition at line 120 of file controller\&.py'\&.
.SS "def controller::Controller::edit (self, task_item)".PP
.nf
Edit an existing Task.

Arguments:
    task_item (Task): Task with matching key and updated attributes.

Returns:
    old_task (Task): Task as it was in storage before being updated.

Using the given Task's key, finds a Task instorage with a matching key
and replaces it with the new Task's attributes that aren't None.

.fi
.PP
 
.PP
Definition at line 91 of file controller\&.py'\&.
.SS "def controller::Controller::find (self, task_item)".PP
.nf
Return all Tasks or one with matching key.

Arguments:
    task_item (Task): Task object to find in storage.

Returns:
    task_list (Task[]): Returned if task_item.key is None.
    task_match (Task): Returned if key has matching Task.
    None (None): Returned if key has no matching Task.

Using the given Task, return a list of all Tasks if it's key is None.
Return a single Task if a key is specified and there is a Task in
storage with a matching key.

.fi
.PP
 
.PP
Definition at line 65 of file controller\&.py'\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Task-Organizer from the source code'\&.
