.TH "TASK-ORGANIZER" "1" "September 19, 2011" "0.0" "Task-Organizer"
.SH NAME
task-organizer \- Task-Organizer Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructeredText.
.
.sp
Contents:
.sp
The docstring for a module should generally list the classes, exceptions and functions (and any other objects) that are exported by the module, with a one\-line summary of each. (These summaries generally give less detail than the summary line in the object\(aqs docstring.) The docstring for a package (i.e., the docstring of the package\(aqs __init__.py module) should also list the modules and subpackages exported by the package.
.sp
Facilitate Tasks in persistant storage.
.INDENT 0.0
.TP
.B Public Classes:
FileStorage
SQLiteStorage
GTaskStorage
StorageFactory
.UNINDENT
.sp
Provides an interface to persist Task objects in differet storage mediums.
.INDENT 0.0
.TP
.B class storage.FileStorage(task_filename=\(aqtaskfile\(aq, key_filename=\(aqkeyfile\(aq)
Interface for storing Tasks to a file.
.INDENT 7.0
.TP
.B Kwargs/Instance Vars:
task_filename (str): Name of file in which to store the Task list.
key_filename (str): Name of file in which to store the next key.
.TP
.B Public methods:
add(task_item)
find(key = None)
get_all()
update(task_item)
delete(key)
search(search_task)
.UNINDENT
.sp
Reads and writes Task objects from a file as a single list.
.INDENT 7.0
.TP
.B add(task_item)
Add a Task to the file storage.
.INDENT 7.0
.TP
.B Args:
task_item (Task): The Task object to be added to storage.
.TP
.B Returns:
task_item.key (int): Newly added Task\(aqs key.
.UNINDENT
.sp
Raises:
.sp
The Task object is given a key and appended to the list of Tasks in the file.
.UNINDENT
.INDENT 7.0
.TP
.B delete(key)
Delete an existing Task in the file storage.
.INDENT 7.0
.TP
.B Args:
key (int): The key for the desired Task object to delete.
.TP
.B Returns:
key_match (int): Task\(aqs key that was deleted in storage.
.UNINDENT
.sp
Raises:
.sp
Using the given key, iterate through the Task list and delete the 
matching Task. If none is found, nothing is deleted and return None.
.UNINDENT
.INDENT 7.0
.TP
.B find(key=None)
Return a Task given it\(aqs key.
.INDENT 7.0
.TP
.B Args:
key (int): The key for the desired Task object.
.TP
.B Returns:
task_item (Task): Task with matching key.
.UNINDENT
.sp
Raises:
.sp
Using the given key, iterate through the Task list and return the Task
with matching key. If none is found return None.
.UNINDENT
.INDENT 7.0
.TP
.B get_all()
Return a list of all Tasks.
.INDENT 7.0
.TP
.B Returns:
task_list (Task[]): List of every task in storage.
.UNINDENT
.sp
Raises:
.UNINDENT
.INDENT 7.0
.TP
.B search(search_task)
Return a Task list given a search Task.
.INDENT 7.0
.TP
.B Args:
search_task (Task): The Task to be used for searching.
.TP
.B Returns:
task_search_list (Task[]): List of Tasks matching search criteria.
.UNINDENT
.sp
Raises:
.sp
Using the given search Task, iterate through the Task list and append
matching Tasks to a Task list then return this list. If none matches,
return None.
.UNINDENT
.INDENT 7.0
.TP
.B update(task_item)
Update an existing Task in the file storage.
.INDENT 7.0
.TP
.B Args:
task_item (Task): The Task object to be updated.
.TP
.B Returns:
key_match (int): Task\(aqs key that was updating in storage.
.UNINDENT
.sp
Raises:
.sp
Using the given Task\(aqs key, iterate through the Task list to find a
matching key, replace the matching Task with the given Task, and
return the old Task. If none is found, update nothing and return None.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class storage.GTaskStorage
Interface for storing Tasks to Google Tasks.
.INDENT 7.0
.TP
.B Public methods:
add(task_item)
find(key = None)
get_all()
update(task_item)
delete(key)
search(search_task)
.UNINDENT
.sp
Reads and writes Task from Google Tasks. Task objects are transformed
to and from Google\(aqs task dictionaries.
.INDENT 7.0
.TP
.B add(task_item)
Add a Task to the GTask storage.
.INDENT 7.0
.TP
.B Args:
task_item (Task): The Task object to be added to storage.
.TP
.B Returns:
task_item.key (int): Newly added Task\(aqs key.
.UNINDENT
.sp
Raises:
.sp
The Task object is added to storage and given a key.
.UNINDENT
.INDENT 7.0
.TP
.B delete(key)
Delete an existing Task in the GTask storage.
.INDENT 7.0
.TP
.B Args:
key (int): The key for the desired Task object to delete.
.TP
.B Returns:
key_match (int): Task\(aqs key that was deleted in storage.
.UNINDENT
.sp
Raises:
.sp
Using the given key, delete the matching Task. If none is found,
nothing is deleted and return None.
.UNINDENT
.INDENT 7.0
.TP
.B find(key=None)
Return a Task given it\(aqs key.
.INDENT 7.0
.TP
.B Args:
key (int): The key for the desired Task object.
.TP
.B Returns:
task_item (Task): Task with matching key.
.UNINDENT
.sp
Raises:
.sp
Using the given key, return the Task with the matching key. If none
is found return None.
.UNINDENT
.INDENT 7.0
.TP
.B get_all()
Return a list of all Tasks.
.UNINDENT
.INDENT 7.0
.TP
.B search(search_task)
Return a Task list given a search Task.
.INDENT 7.0
.TP
.B Args:
search_task (Task): The Task to be used for searching.
.TP
.B Returns:
task_search_list (Task[]): List of Tasks matching search criteria.
.UNINDENT
.sp
Raises:
.sp
Using the given search Task, iterate through the Task list and append
matching Tasks to a Task list then return this list. If none matches,
return None.
.UNINDENT
.INDENT 7.0
.TP
.B update(task_item)
Update an existing Task in the GTask storage.
.INDENT 7.0
.TP
.B Args:
task_item (Task): The Task object to be updated.
.TP
.B Returns:
key_match (int): Task\(aqs key that was updating in storage.
.UNINDENT
.sp
Raises:
.sp
Using the given Task\(aqs key, find the Task with a matching key and
replace it with the given Task. Then return the old Task. If none
is found, updating nothing and return None.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class storage.SQLiteStorage(task_dbname=\(aqtaskdb\(aq)
Interface for storing Tasks to a SQLite database.
.INDENT 7.0
.TP
.B Kwargs/Instance Vars:
task_dbname (str): Name of database/file in which to store Tasks.
.TP
.B Public methods:
add(task_item)
find(key = None)
get_all()
update(task_item)
delete(key)
search(search_task)
.UNINDENT
.sp
Reads and writes Task objects from a sqlite database file. Tasks are
stored in a table whos columns coincide with the Task\(aqs attributes.
.INDENT 7.0
.TP
.B add(task_item)
Add a Task to the database storage.
.INDENT 7.0
.TP
.B Args:
task_item (Task): The Task object to be added to storage.
.TP
.B Returns:
task_item.key (int): Newly added Task\(aqs key.
.UNINDENT
.sp
Raises:
.sp
The Task object is given a key and appended to the list of Tasks in
the database.
.UNINDENT
.INDENT 7.0
.TP
.B delete(key)
Delete an existing Task in the database storage.
.INDENT 7.0
.TP
.B Args:
key (int): The key for the desired Task object to delete.
.TP
.B Returns:
key_match (int): Task\(aqs key that was deleted in storage.
.UNINDENT
.sp
Raises:
.sp
Using the given key, find the matching Task in the database and
delete it. If none is found, nothing is deleted and return None.
.UNINDENT
.INDENT 7.0
.TP
.B find(key=None)
Return a Task given it\(aqs key.
.INDENT 7.0
.TP
.B Args:
key (int): The key for the desired Task object.
.TP
.B Returns:
task_item (Task): Task with matching key.
.UNINDENT
.sp
Raises:
.sp
Using the given key, get the Task with the matching key from the
database and return the Task. If none is found return None.
.UNINDENT
.INDENT 7.0
.TP
.B get_all()
Return a list of all Task\(aqs.
.UNINDENT
.INDENT 7.0
.TP
.B search(search_task)
Return a Task list given a search Task.
.INDENT 7.0
.TP
.B Args:
search_task (Task): The Task to be used for searching.
.TP
.B Returns:
task_search_list (Task[]): List of Tasks matching search criteria.
.UNINDENT
.sp
Raises:
.sp
Using the given search Task, return a Task list of all Tasks that
match the search Task\(aqs attributes.
.UNINDENT
.INDENT 7.0
.TP
.B update(task_item)
Update an existing Task in the database storage.
.INDENT 7.0
.TP
.B Args:
task_item (Task): The Task object to be updated.
.TP
.B Returns:
key_match (int): Task\(aqs key that was updating in storage.
.UNINDENT
.sp
Raises:
.sp
Using the given Task\(aqs key, find the matching Task in the database and
replace it with the given Task then return the old Task. If none is
found, update nothing and return None.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class storage.Storage
Abstract base class for Task storage.
.INDENT 7.0
.TP
.B Public methods:
add(task_item)
find(key = None)
get_all()
update(task_item)
delete(key)
search(search_task)
.UNINDENT
.INDENT 7.0
.TP
.B add(task_item)
This functions is to be overridden by a specific storage method.
.UNINDENT
.INDENT 7.0
.TP
.B delete(key)
This functions is to be overridden by a specific storage method.
.UNINDENT
.INDENT 7.0
.TP
.B find(key=None)
This functions is to be overridden by a specific storage method.
.UNINDENT
.INDENT 7.0
.TP
.B get_all()
This functions is to be overridden by a specific storage method.
.UNINDENT
.INDENT 7.0
.TP
.B search(search_task)
This functions is to be overridden by a specific storage method.
.UNINDENT
.INDENT 7.0
.TP
.B update(task_item)
This functions is to be overridden by a specific storage method.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class storage.StorageFactory
Interface for getting a storage instance.
.INDENT 7.0
.TP
.B Public methods:
get(storage_type, 
.nf
**
.fi
kwargs)
.UNINDENT
.sp
Select the type of storage in which to store Task objects and pass
arguments to the specified storage classes constructor.
.INDENT 7.0
.TP
.B static get(storage_type, **kwargs)
Return a Task storage instance.
.INDENT 7.0
.TP
.B Args:
storage_type (str): Name of the desired storage type.
kwargs (str): Keyword arguments specific to each storage type.
.TP
.B Returns:
storage_instance (Storage): Child instance of a storage class.
.UNINDENT
.sp
Using the given storage type, create an instance with the given
optional keyword arguments and return the storage instance.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.UNINDENT
.SH AUTHOR
Scott Giminiani
.SH COPYRIGHT
2011, Scott Giminiani
.\" Generated by docutils manpage writer.
.\" 
.
