
Welcome to Task-Organizer's documentation!
******************************************

Contents:


5. taskstorage
**************

The docstring for a module should generally list the classes,
exceptions and functions (and any other objects) that are exported by
the module, with a one-line summary of each. (These summaries
generally give less detail than the summary line in the object's
docstring.) The docstring for a package (i.e., the docstring of the
package's __init__.py module) should also list the modules and
subpackages exported by the package.


5. taskstorage
**************

Facilitate Tasks in persistant storage.

Public Classes:
   FileStorage SQLiteStorage GTaskStorage StorageFactory

Provides an interface to persist Task objects in differet storage
mediums.

class class storage.FileStorage(task_filename='taskfile', key_filename='keyfile')

   Interface for storing Tasks to a file.

   Kwargs/Instance Vars:
      task_filename (str): Name of file in which to store the Task
      list. key_filename (str): Name of file in which to store the
      next key.

   Public methods:
      add(task_item) find(key = None) get_all() update(task_item)
      delete(key) search(search_task)

   Reads and writes Task objects from a file as a single list.

   add(task_item)

      Add a Task to the file storage.

      Args:
         task_item (Task): The Task object to be added to storage.

      Returns:
         task_item.key (int): Newly added Task's key.

      Raises:

      The Task object is given a key and appended to the list of Tasks
      in the file.

   delete(key)

      Delete an existing Task in the file storage.

      Args:
         key (int): The key for the desired Task object to delete.

      Returns:
         key_match (int): Task's key that was deleted in storage.

      Raises:

      Using the given key, iterate through the Task list and delete
      the  matching Task. If none is found, nothing is deleted and
      return None.

   find(key=None)

      Return a Task given it's key.

      Args:
         key (int): The key for the desired Task object.

      Returns:
         task_item (Task): Task with matching key.

      Raises:

      Using the given key, iterate through the Task list and return
      the Task with matching key. If none is found return None.

   get_all()

      Return a list of all Tasks.

      Returns:
         task_list (Task[]): List of every task in storage.

      Raises:

   search(search_task)

      Return a Task list given a search Task.

      Args:
         search_task (Task): The Task to be used for searching.

      Returns:
         task_search_list (Task[]): List of Tasks matching search
         criteria.

      Raises:

      Using the given search Task, iterate through the Task list and
      append matching Tasks to a Task list then return this list. If
      none matches, return None.

   update(task_item)

      Update an existing Task in the file storage.

      Args:
         task_item (Task): The Task object to be updated.

      Returns:
         key_match (int): Task's key that was updating in storage.

      Raises:

      Using the given Task's key, iterate through the Task list to
      find a matching key, replace the matching Task with the given
      Task, and return the old Task. If none is found, update nothing
      and return None.

class class storage.GTaskStorage

   Interface for storing Tasks to Google Tasks.

   Public methods:
      add(task_item) find(key = None) get_all() update(task_item)
      delete(key) search(search_task)

   Reads and writes Task from Google Tasks. Task objects are
   transformed to and from Google's task dictionaries.

   add(task_item)

      Add a Task to the GTask storage.

      Args:
         task_item (Task): The Task object to be added to storage.

      Returns:
         task_item.key (int): Newly added Task's key.

      Raises:

      The Task object is added to storage and given a key.

   delete(key)

      Delete an existing Task in the GTask storage.

      Args:
         key (int): The key for the desired Task object to delete.

      Returns:
         key_match (int): Task's key that was deleted in storage.

      Raises:

      Using the given key, delete the matching Task. If none is found,
      nothing is deleted and return None.

   find(key=None)

      Return a Task given it's key.

      Args:
         key (int): The key for the desired Task object.

      Returns:
         task_item (Task): Task with matching key.

      Raises:

      Using the given key, return the Task with the matching key. If
      none is found return None.

   get_all()

      Return a list of all Tasks.

   search(search_task)

      Return a Task list given a search Task.

      Args:
         search_task (Task): The Task to be used for searching.

      Returns:
         task_search_list (Task[]): List of Tasks matching search
         criteria.

      Raises:

      Using the given search Task, iterate through the Task list and
      append matching Tasks to a Task list then return this list. If
      none matches, return None.

   update(task_item)

      Update an existing Task in the GTask storage.

      Args:
         task_item (Task): The Task object to be updated.

      Returns:
         key_match (int): Task's key that was updating in storage.

      Raises:

      Using the given Task's key, find the Task with a matching key
      and replace it with the given Task. Then return the old Task. If
      none is found, updating nothing and return None.

class class storage.SQLiteStorage(task_dbname='taskdb')

   Interface for storing Tasks to a SQLite database.

   Kwargs/Instance Vars:
      task_dbname (str): Name of database/file in which to store
      Tasks.

   Public methods:
      add(task_item) find(key = None) get_all() update(task_item)
      delete(key) search(search_task)

   Reads and writes Task objects from a sqlite database file. Tasks
   are stored in a table whos columns coincide with the Task's
   attributes.

   add(task_item)

      Add a Task to the database storage.

      Args:
         task_item (Task): The Task object to be added to storage.

      Returns:
         task_item.key (int): Newly added Task's key.

      Raises:

      The Task object is given a key and appended to the list of Tasks
      in the database.

   delete(key)

      Delete an existing Task in the database storage.

      Args:
         key (int): The key for the desired Task object to delete.

      Returns:
         key_match (int): Task's key that was deleted in storage.

      Raises:

      Using the given key, find the matching Task in the database and
      delete it. If none is found, nothing is deleted and return None.

   find(key=None)

      Return a Task given it's key.

      Args:
         key (int): The key for the desired Task object.

      Returns:
         task_item (Task): Task with matching key.

      Raises:

      Using the given key, get the Task with the matching key from the
      database and return the Task. If none is found return None.

   get_all()

      Return a list of all Task's.

   search(search_task)

      Return a Task list given a search Task.

      Args:
         search_task (Task): The Task to be used for searching.

      Returns:
         task_search_list (Task[]): List of Tasks matching search
         criteria.

      Raises:

      Using the given search Task, return a Task list of all Tasks
      that match the search Task's attributes.

   update(task_item)

      Update an existing Task in the database storage.

      Args:
         task_item (Task): The Task object to be updated.

      Returns:
         key_match (int): Task's key that was updating in storage.

      Raises:

      Using the given Task's key, find the matching Task in the
      database and replace it with the given Task then return the old
      Task. If none is found, update nothing and return None.

class class storage.Storage

   Abstract base class for Task storage.

   Public methods:
      add(task_item) find(key = None) get_all() update(task_item)
      delete(key) search(search_task)

   add(task_item)

      This functions is to be overridden by a specific storage method.

   delete(key)

      This functions is to be overridden by a specific storage method.

   find(key=None)

      This functions is to be overridden by a specific storage method.

   get_all()

      This functions is to be overridden by a specific storage method.

   search(search_task)

      This functions is to be overridden by a specific storage method.

   update(task_item)

      This functions is to be overridden by a specific storage method.

class class storage.StorageFactory

   Interface for getting a storage instance.

   Public methods:
      get(storage_type, >>**<<kwargs)

   Select the type of storage in which to store Task objects and pass
   arguments to the specified storage classes constructor.

   static get(storage_type, **kwargs)

      Return a Task storage instance.

      Args:
         storage_type (str): Name of the desired storage type. kwargs
         (str): Keyword arguments specific to each storage type.

      Returns:
         storage_instance (Storage): Child instance of a storage
         class.

      Using the given storage type, create an instance with the given
      optional keyword arguments and return the storage instance.


Indices and tables
******************

* *Index*

* *Module Index*

* *Search Page*
